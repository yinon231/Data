const { donationRepository } = require("../repository/donationRepository");
const {
  validateDonation,
  validateDonationUpdate,
} = require("../models/donationModel");
exports.donationController = {
  getDonation: async (req, res) => {
    try {
      const donations = await donationRepository.getDonation();
      if (donations.length > 0) {
        res.status(200).send(donations);
      } else res.status(404).json({ message: "Donations not found" });
    } catch (error) {
      res.status(500).send(error);
    }
  },
  getDonationbyId: async (req, res) => {
    try {
      if (isNaN(req.params.id))
        return res.status(400).json({ message: "Invalid id" });
      const donation = await donationRepository.getDonationbyId(req.params.id);
      if (donation.length > 0) {
        res.status(200).send(donation);
      } else res.status(404).json({ message: "Donation not found" });
    } catch (error) {
      res.status(500).send(error);
    }
  },
  createDonation: async (req, res) => {
    try {
      let validBody = validateDonation(req.body);
      if (validBody.error) {
        return res.status(400).send(validBody.error.details);
      }
      await donationRepository.createDonation(req.body);
      res.status(201).json({ message: "Donation created successfully" });
    } catch (error) {
      console.log(error);
      res.status(500).send(error);
    }
  },
  updateDonation: async (req, res) => {
    try {
      const validBody = validateDonationUpdate(req.body);
      if (validBody.error) {
        return res.status(400).send(validBody.error.details);
      }
      const updateDonation = await donationRepository.updateDonation(
        req.params.id,
        req.body
      );
      if (updateDonation) {
        res.status(200).json({ message: "Donation updated successfully" });
      } else res.status(404).json({ message: "Donation not found" });
    } catch (error) {
      res.status(500).send(error);
    }
  },
  deleteDonaotion: async (req, res) => {
    try {
      if (isNaN(req.params.id))
        return res.status(400).json({ message: "Invalid id" });
      const donation = await donationRepository.deleteDonaotion(req.params.id);
      if (donation) {
        res.status(200).json({ message: "Donation deleted successfully" });
      } else res.status(404).json({ message: "Donation not found" });
    } catch (error) {
      res.status(500).send(error);
    }
  },
};
